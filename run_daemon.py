#!/usr/bin/env python3
"""
Simple script to run the Claude monitoring daemon with custom configuration.
"""
import sys
import os
import argparse
import signal
import time
from pathlib import Path

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from daemon.claude_daemon import ClaudeDaemon
from shared.data_models import ConfigData
from shared.utils import detect_subscription_limits


def signal_handler(signum, frame):
    """Handle shutdown signals gracefully."""
    print(f"\nüõë Otrzymano sygna≈Ç {signum}, zatrzymujƒô demona...")
    global daemon_instance
    if daemon_instance:
        daemon_instance.stop()
    sys.exit(0)


daemon_instance = None


def main():
    """Run daemon with command line configuration."""
    parser = argparse.ArgumentParser(description='Uruchom demona Claude Monitor')
    parser.add_argument('--start-day', type=int, default=1, 
                       help='Dzie≈Ñ startu abonamentu (1-31, domy≈õlnie: 1)')
    parser.add_argument('--interval', type=int, default=10,
                       help='Interwa≈Ç pobierania danych w sekundach (domy≈õlnie: 10)')
    parser.add_argument('--time-alert', type=int, default=30,
                       help='Alert czasowy w minutach (domy≈õlnie: 30)')
    parser.add_argument('--inactivity-alert', type=int, default=10,
                       help='Alert bezczynno≈õci w minutach (domy≈õlnie: 10)')
    parser.add_argument('--sessions', type=int, default=50,
                       help='Maksymalne sesje miesiƒôczne (domy≈õlnie: 50)')
    parser.add_argument('--auto-detect', action='store_true', default=True,
                       help='Automatycznie wykryj typ subskrypcji i dostosuj limity (domy≈õlnie: w≈ÇƒÖczone)')
    parser.add_argument('--no-auto-detect', action='store_false', dest='auto_detect',
                       help='Wy≈ÇƒÖcz automatyczne wykrywanie i u≈ºyj rƒôcznej warto≈õci --sessions')
    parser.add_argument('--timezone', type=str, default="Europe/Warsaw",
                       help='Strefa czasowa (domy≈õlnie: Europe/Warsaw)')
    
    args = parser.parse_args()
    
    # Validate arguments
    if not 1 <= args.start_day <= 31:
        print("‚ùå Dzie≈Ñ startu abonamentu musi byƒá miƒôdzy 1 a 31")
        return 1
    
    if args.interval < 1:
        print("‚ùå Interwa≈Ç musi byƒá wiƒôkszy ni≈º 0 sekund")
        return 1
    
    # Handle auto-detection of subscription limits
    sessions_limit = args.sessions
    if args.auto_detect:
        print("üîç Automatyczne wykrywanie subskrypcji...")
        detection_result = detect_subscription_limits()
        
        print(f"‚úÖ Wykryto: {detection_result['subscription_type']}")
        print(f"üìä Limity sesji: {detection_result['total_monthly_sessions']}")
        print(f"üî¨ Metoda: {detection_result['detection_method']}")
        print(f"üéØ Pewno≈õƒá: {detection_result['confidence']}")
        print()
        
        sessions_limit = detection_result['total_monthly_sessions']
    
    # Create configuration
    config = ConfigData(
        ccusage_fetch_interval_seconds=args.interval,
        time_remaining_alert_minutes=args.time_alert,
        inactivity_alert_minutes=args.inactivity_alert,
        billing_start_day=args.start_day,
        total_monthly_sessions=sessions_limit,
        local_timezone=args.timezone
    )
    
    print("=== CLAUDE MONITORING DAEMON ===")
    print(f"üìÖ Dzie≈Ñ startu abonamentu: {config.billing_start_day}")
    print(f"‚è±Ô∏è  Interwa≈Ç pobierania: {config.ccusage_fetch_interval_seconds} sekund")
    print(f"‚è∞ Alert czasowy: {config.time_remaining_alert_minutes} minut")
    print(f"üò¥ Alert bezczynno≈õci: {config.inactivity_alert_minutes} minut")
    print(f"üìä Maksymalne sesje: {config.total_monthly_sessions}")
    print(f"üåç Strefa czasowa: {config.local_timezone}")
    
    # Set up signal handlers
    signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Terminate
    
    # Create and start daemon
    global daemon_instance
    daemon_instance = ClaudeDaemon(config)
    
    try:
        print(f"\nüöÄ Uruchamiam demona...")
        daemon_instance.start()
        print("‚úÖ Demon uruchomiony pomy≈õlnie")
        
        print(f"\nüìÅ Dane zapisywane w:")
        print(f"   ~/.config/claude-monitor/monitor_data.json")
        print(f"   ~/Library/Mobile Documents/com~apple~CloudDocs/claude-monitor/ (je≈õli dostƒôpne)")
        
        print(f"\nüí° Aby zatrzymaƒá demona naci≈õnij Ctrl+C")
        print(f"üìä Monitorowanie w toku...")
        
        # Keep daemon running
        while daemon_instance.is_running:
            time.sleep(1)
        
    except KeyboardInterrupt:
        print(f"\nüõë Otrzymano Ctrl+C, zatrzymujƒô demona...")
    except Exception as e:
        print(f"\n‚ùå B≈ÇƒÖd demona: {e}")
    finally:
        if daemon_instance and daemon_instance.is_running:
            daemon_instance.stop()
        print("‚úÖ Demon zatrzymany")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())